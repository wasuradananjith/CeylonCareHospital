/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceyloncare.patient;

import ceyloncare.login.Connect;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wasura Dananjith
 */
public class PatientAdmit extends javax.swing.JFrame {
    Connection con = null;
    ResultSet rs = null;
    PreparedStatement pst= null;
    String patientID = "",patientName="";
    String choice="";
    int flag=0; // To check whether previous control flow is from which form
    int admitCount=0; // To generate the new admission number
    /**
     * Creates new form PatientAdmit
     * @param ch
     * @param id
     * @param name
     * @param n
     */
    public PatientAdmit(String ch,String id,String name,int n) {
        initComponents();
        setLocationRelativeTo(null);
        patientID = id;
        patientName = name;
        txtPatientID.setText(patientID);
        txtName.setText(patientName);
        flag = n;
        choice = ch;
        
        // Generates new admit_id
        this.generateID();
        
        // Get data for jTable1 when this form is loading
        this.getData1();
        
        // Get data for jTable2 when this form is loading
        this.getData2();
        
        // Get data for jTable3 when this form is loading
        this.getData3();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAdmitID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDisease = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtWard = new javax.swing.JTextField();
        btnWard = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSLMC = new javax.swing.JTextField();
        txtRecName = new javax.swing.JTextField();
        btnRec = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtDocSearch = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lbDocName = new javax.swing.JLabel();
        btnConfirmedDoc = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        btnNew1 = new javax.swing.JButton();
        btnSave1 = new javax.swing.JButton();
        btnGetData1 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Patient Admit");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Admit Details"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Patient ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 63, -1, -1));
        jPanel1.add(txtAdmitID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 151, -1));

        jLabel2.setText("Admission Number");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 33, -1, -1));

        txtPatientID.setAutoscrolls(false);
        txtPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIDActionPerformed(evt);
            }
        });
        jPanel1.add(txtPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 151, -1));

        jLabel3.setText("Patient Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 151, -1));

        jLabel7.setText("Admit Date");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(298, 65, -1, -1));
        jPanel1.add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 62, 151, -1));

        jLabel11.setText("(YYYY-MM-DD)");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, -1, -1));

        jLabel10.setText("Disease");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(298, 30, -1, -1));
        jPanel1.add(txtDisease, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 27, 150, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ward Details"));

        jLabel4.setText("Ward Number");

        txtWard.setText("Search or type here");
        txtWard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWardActionPerformed(evt);
            }
        });
        txtWard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWardKeyReleased(evt);
            }
        });

        btnWard.setText("Get Number");
        btnWard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWardActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ward Number", "Name"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(33, 33, 33)
                        .addComponent(txtWard, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnWard))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtWard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnWard)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Doctor Details"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Recommended by"));

        jLabel5.setText("SLMC Number");

        jLabel6.setText("Name");

        txtSLMC.setText("Search or type here");
        txtSLMC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSLMCKeyReleased(evt);
            }
        });

        btnRec.setText("Get Details");
        btnRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "SLMC Number", "Name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRecName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnRec)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(txtSLMC, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtSLMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtRecName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRec)))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Confirmed by"));

        jLabel8.setText("Doctor ID");

        txtDocSearch.setText("Search here");
        txtDocSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDocSearchKeyReleased(evt);
            }
        });

        jLabel9.setText("Doctor Name");

        btnConfirmedDoc.setText("Get Details");
        btnConfirmedDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmedDocActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "SLMC Number", "Specialty"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(lbDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConfirmedDoc, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(47, 47, 47)
                        .addComponent(txtDocSearch)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtDocSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirmedDoc))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnNew1.setText("New");
        btnNew1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNew1ActionPerformed(evt);
            }
        });

        btnSave1.setText("Save");
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        btnGetData1.setText("Get Patient Info");
        btnGetData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetData1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGetData1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNew1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNew1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGetData1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtWardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWardActionPerformed

    private void txtSLMCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSLMCKeyReleased
        this.search1();
    }//GEN-LAST:event_txtSLMCKeyReleased

    private void txtDocSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocSearchKeyReleased
        this.search2();
    }//GEN-LAST:event_txtDocSearchKeyReleased

    private void txtWardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWardKeyReleased
        this.search3();
    }//GEN-LAST:event_txtWardKeyReleased

    // Get data to particular fields when button is clicked
    private void btnRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable1.getSelectedRow();
            String table_click= jTable1.getModel().getValueAt(row, 0).toString();

            // Get data for particular ep_slmc_no
            String query= "SELECT * FROM external_physician WHERE ep_slmc_no= '" + table_click + "'";
            pst=con.prepareStatement(query);
            rs=  pst.executeQuery();
            
            // Add data to the required fields
            if(rs.next()){
                String addSLMC=rs.getString("ep_slmc_no");
                this.txtSLMC.setText(addSLMC);
                
                String addName=rs.getString("ep_name");
                this.txtRecName.setText(addName);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_btnRecActionPerformed

    private void btnConfirmedDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmedDocActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable2.getSelectedRow();
            String table_click= jTable2.getModel().getValueAt(row, 0).toString();

            // Get data for particular emp_id
            String query= "SELECT d.emp_id,e.emp_name FROM doctor d,employee e WHERE e.emp_id= '" 
                    + table_click + "' AND e.emp_id=d.emp_id";
            pst=con.prepareStatement(query);
            rs=  pst.executeQuery();
            
            // Add data to the required fields
            if(rs.next()){
                String addID=rs.getString("emp_id");
                this.txtDocSearch.setText(addID);
                
                String addName=rs.getString("emp_name");
                this.lbDocName.setText(addName);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_btnConfirmedDocActionPerformed

    private void btnWardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWardActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable3.getSelectedRow();
            String table_click= jTable3.getModel().getValueAt(row, 0).toString();

            // Get data for particular emp_id
            String query= "SELECT * FROM ward WHERE ward_no= '" 
                    + table_click + "'";
            pst=con.prepareStatement(query);
            rs=  pst.executeQuery();
            
            // Add data to the required fields
            if(rs.next()){
                String addNo=rs.getString("ward_no");
                this.txtWard.setText(addNo);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_btnWardActionPerformed

    private void btnNew1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNew1ActionPerformed
        // Reset all the fields
        this.clear();
    }//GEN-LAST:event_btnNew1ActionPerformed

    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed
        try{
            con=Connect.ConnectDB();
            String admitID,pID,pName,date,slmc,recName,docID,ward,disease;

            admitID=txtAdmitID.getText();
            pID=txtPatientID.getText();
            pName=txtName.getText();
            date=txtDate.getText();
            slmc=txtSLMC.getText();
            recName=txtRecName.getText();
            docID=txtDocSearch.getText();
            ward=txtWard.getText();
            disease=txtDisease.getText();
            
            // Checking whether the necessary fields are empty before inserting data
            if (admitID.equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Admission Number","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (pID.equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Patient ID","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (pName.equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Patient Name","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (slmc.equals("") || slmc.equals("Search or type here")) {
                JOptionPane.showMessageDialog( this, "Please enter SLMC Number","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (recName.equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter the Name of External Physician","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (docID.equals("") || docID.equals("Search here")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor Details","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (ward.equals("") || ward.equals("Search or type here")) {
                JOptionPane.showMessageDialog( this, "Please enter Ward Number","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Checking whether the entered admit_id is already in the table
            String query="SELECT admit_id FROM admission WHERE admit_id= '" + admitID + "'";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery(query);

            if(rs.next()){
                JOptionPane.showMessageDialog( this, "Admission Number already exists","Error", JOptionPane.ERROR_MESSAGE);
                txtAdmitID.setText("");
                txtAdmitID.requestDefaultFocus();
                return;
            }
            
            // To check whether there are any beds to allocate a patient
            String qry = "SELECT no_of_beds,current_no_patients FROM ward WHERE ward_no='"+ward+"'";
            pst=con.prepareStatement(qry);
            rs= pst.executeQuery();
            rs.next();
            int beds = Integer.parseInt(rs.getString("no_of_beds"));
            int patients=Integer.parseInt(rs.getString("current_no_patients"));
            if (beds==patients){
                // If no beds to allocate
                JOptionPane.showMessageDialog( this, "Ward is full!","Error", JOptionPane.ERROR_MESSAGE);
                txtWard.setText("");
                txtWard.requestDefaultFocus();
                return;
            }
            
            // Query to insert data into admission table
            String query1= "INSERT INTO admission(admit_id,admit_date,ep_slmc_no,patient_id,ward_no,disease,discharged) "
                    + "VALUES('"+admitID + "','" + date + "','" + slmc+ "','"+ pID+ "','"+ ward +"','"+disease+"','0')";
            
            // Query to insert data into patient_doc_confirm table
            String query2 = "INSERT INTO patient_doc_confirm "
            + "VALUES('"+ admitID + "','" + docID + "')";
               
            pst=con.prepareStatement(query1);
            pst.execute();

            pst=con.prepareStatement(query2);
            pst.execute();
            
            // Query to select details about a particular external physician
            String query3 = "SELECT * FROM external_physician WHERE ep_slmc_no='"+slmc+"'";
            pst=con.prepareStatement(query3);
            rs=pst.executeQuery();
            
            // If the external physican is not already in the table, INSERT those new details
            if(!rs.next()){
                String query4 = "INSERT INTO external_physician "
                        + "VALUES('"+slmc+"','"+recName+"')";
                pst=con.prepareStatement(query4);
                pst.execute();
            }
            
            // Update patient table
            String query5 = "UPDATE patient SET ep_slmc_no='"+slmc+"' WHERE patient_id='"+pID+"'";
            pst=con.prepareStatement(query5);
            pst.execute();
            
            // Update number of current patients in the ward
            String query6 = "UPDATE ward SET current_no_patients='"+(patients+1)+"' WHERE ward_no='"+ward+"'";
            pst=con.prepareStatement(query6);
            pst.execute();
            
            // Creating a dialog box with YES, NO options
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to assign the patient to a Doctor?","Comfirm",dialogButton);
            
            if(dialogResult == JOptionPane.YES_OPTION){
                // If YES button is pressed load DoctorAssign form
                this.hide();
                DoctorAssign frm = new DoctorAssign(choice,pName,pID,admitID,1);
                frm.setVisible(true);
            }
            else{
                // If No button is pressed display a SUCCESS message
                JOptionPane.showMessageDialog(this,"Admission Completed","Success",JOptionPane.INFORMATION_MESSAGE);
                btnSave1.setEnabled(false);
            }
                       
        } catch (HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_btnSave1ActionPerformed

    private void btnGetData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetData1ActionPerformed
        this.hide();
        // Load PatientRecord form to select already inserted patient details
        PatientRecord frm = new PatientRecord("Administrator",1);
        frm.setVisible(true);
    }//GEN-LAST:event_btnGetData1ActionPerformed

    private void txtPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientAdmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientAdmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientAdmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientAdmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientAdmit(null,null,null,0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmedDoc;
    private javax.swing.JButton btnGetData1;
    private javax.swing.JButton btnNew1;
    private javax.swing.JButton btnRec;
    public javax.swing.JButton btnSave1;
    private javax.swing.JButton btnWard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbDocName;
    private javax.swing.JTextField txtAdmitID;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDisease;
    private javax.swing.JTextField txtDocSearch;
    public javax.swing.JTextField txtName;
    public javax.swing.JTextField txtPatientID;
    public javax.swing.JTextField txtRecName;
    private javax.swing.JTextField txtSLMC;
    private javax.swing.JTextField txtWard;
    // End of variables declaration//GEN-END:variables

    
    // Get data for jTable1 when this form is loading
    private void getData1() {
        con=Connect.ConnectDB();
        try{
            String query="SELECT * FROM external_physician";
            pst=con.prepareStatement(query);
            rs= pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2)});
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Get data for jTable2 when this form is loading
    private void getData2() {
        con=Connect.ConnectDB();
        try{
            String query1="SELECT d.emp_id,e.emp_name,d.doc_slmc_no,d.spec_name FROM doctor d,employee e"
                    + " WHERE e.emp_id=d.emp_id";
            pst=con.prepareStatement(query1);
            rs= pst.executeQuery();
            
            DefaultTableModel registrationModel = (DefaultTableModel)jTable2.getModel();
            registrationModel.setRowCount(0);
            
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)});
                
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Get data for jTable3 when this form is loading
    private void getData3() {
        con=Connect.ConnectDB();
        try{
            String query="SELECT * FROM ward";
            pst=con.prepareStatement(query);
            rs= pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable3.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(3)});
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Search external_physician table
    private void search1() {
        try{
            con=Connect.ConnectDB();
            String query="SELECT * FROM external_physician "
                    + "WHERE ep_slmc_no LIKE '%"+txtSLMC.getText()+"%' OR ep_name LIKE '%"
                    +txtSLMC.getText()+"%'";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }

    // Search doctor and employee tables
    private void search2() {
        try{
            con=Connect.ConnectDB();
            String query="SELECT d.emp_id,e.emp_name,d.doc_slmc_no,d.spec_name FROM doctor d,employee e "
                    + "WHERE (d.emp_id LIKE '%"+txtDocSearch.getText()+"%' OR e.emp_name LIKE '%"
                    +txtDocSearch.getText()+"%' OR d.doc_slmc_no LIKE '%"+txtDocSearch.getText()
                    +"%' OR d.spec_name LIKE '%"+txtDocSearch.getText()+"%') AND e.emp_id=d.emp_id";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable2.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),
                    rs.getString(3),rs.getString(4)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }

    // Search ward table
    private void search3() {
         try{
            con=Connect.ConnectDB();
            String query="SELECT ward_no,spec_name FROM ward "
                    + "WHERE ward_no LIKE '%"+txtWard.getText()+"%' OR spec_name LIKE '%"
                    +txtWard.getText()+"%'";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable3.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }

    // Reset all the fields
    private void clear() {
        
        this.generateID();
        txtPatientID.setText("");
        txtName.setText("");
        txtDate.setText("");
        txtSLMC.setText("Search or type here");
        txtRecName.setText("");
        txtDocSearch.setText("Search here");
        lbDocName.setText("");
        txtWard.setText("Search or type here");
        txtDisease.setText("");
        
        btnSave1.setEnabled(true);
        txtAdmitID.requestDefaultFocus();
    }

    // Generates new admit_id for each new admission
    private void generateID() {
        try{
            con = Connect.ConnectDB();
            
            // Selecting last admit_id in the table using rs.last()
            String query = "SELECT admit_id FROM admission ORDER BY admit_id";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            rs.last();
            admitCount = Integer.parseInt(rs.getString(1))+1;
            txtAdmitID.setText(Integer.toString(admitCount));
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }
}
