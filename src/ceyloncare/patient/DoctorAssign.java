/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceyloncare.patient;

import ceyloncare.login.Connect;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wasura Dananjith
 */
public class DoctorAssign extends javax.swing.JFrame {
    Connection con = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    String choice = ""; // To identify from which mode the control flow was passed 
    String patientID = "";
    String patientName="";
    String admissionNo="";
    int flag=0;// To identify from which form this form was called
    /**
     * Creates new form DoctorAssign
     * @param t
     * @param name
     * @param id
     * @param admtNo
     * @param n
     */
    public DoctorAssign(String t,String name,String id,String admtNo,int n) {
        initComponents();
        setLocationRelativeTo(null);
        choice=t;
        patientName = name;// Patient name can be "" if this was directly called from Home Menus
        patientID = id;// Patient id can be "" if this was directly called from Home Menus
        flag = n;
        admissionNo=admtNo;// Admit no can be "" if this was directly called from Home Menus
        lbPatientID.setText(patientID);
        lbPatientName.setText(patientName);
        txtAdmitNo.setText(admissionNo);
        
        // Get data for jTable1 when this form is loading
        this.getData1();
        
        // Get data for jTable2 when this form is loading
        this.getData2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnGetPatient = new javax.swing.JButton();
        lbPatientName = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtAdmitNo = new javax.swing.JTextField();
        lbPatientID = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtDocID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        getAssignedDoc = new javax.swing.JButton();
        lbDocName = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnGetData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Assign Doctor");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Details"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Patient ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 53, -1, -1));

        jLabel2.setText("Patient Name");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 89, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Admission Number", "Patient ID", "Patient Name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 27, 354, 131));

        btnGetPatient.setText("Get Details");
        btnGetPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetPatientActionPerformed(evt);
            }
        });
        jPanel1.add(btnGetPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 123, -1, -1));
        jPanel1.add(lbPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 83, 140, 28));

        jLabel5.setText("Admission No");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 30, -1, -1));

        txtAdmitNo.setText("Search here");
        txtAdmitNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAdmitNoActionPerformed(evt);
            }
        });
        txtAdmitNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAdmitNoKeyReleased(evt);
            }
        });
        jPanel1.add(txtAdmitNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 24, 149, -1));
        jPanel1.add(lbPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 47, 140, 30));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Assign to"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Doctor ID");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 30, -1, -1));

        txtDocID.setText("Search here");
        txtDocID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDocIDKeyReleased(evt);
            }
        });
        jPanel2.add(txtDocID, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 27, 149, -1));

        jLabel4.setText("Doctor Name");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 59, -1, -1));

        getAssignedDoc.setText("Get Details");
        getAssignedDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAssignedDocActionPerformed(evt);
            }
        });
        jPanel2.add(getAssignedDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 93, -1, -1));
        jPanel2.add(lbDocName, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 53, 149, 29));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name", "Specialization"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 16, 358, 111));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jPanel4.add(btnNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 13, 75, -1));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel4.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 47, 75, -1));

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel4.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 81, 75, -1));

        btnGetData.setText("Get Data");
        btnGetData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDataActionPerformed(evt);
            }
        });
        jPanel4.add(btnGetData, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 115, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Reset all the fields
        this.clear();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        try{
            con=Connect.ConnectDB();
            String admitID,docID;

            docID=txtDocID.getText();
            admitID=txtAdmitNo.getText();

            // Checking whether the necessary fields are empty before inserting data
            if (docID.equals("") || docID.equals("Search here")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor Details","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (admitID.equals("") || admitID.equals("search here")) {
                JOptionPane.showMessageDialog( this, "Please enter Admission Details","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Checking whether the entered admit_id,doc_id(composite key) is already in the table
            String query="SELECT admit_id,doc_id FROM patient_doc_assign WHERE doc_id= '" + docID + "' AND admit_id='"+admitID+"'";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery(query);
            
            if(rs.next()){
                JOptionPane.showMessageDialog( this, "This admission is already assigned to the same doctor","Error", JOptionPane.ERROR_MESSAGE);
                this.clear();
            return;
            }
            
            // Query to insert data into patient_doc_assign table
            String query1= "INSERT INTO patient_doc_assign VALUES('"+admitID + "','" + docID + "')";

            pst=con.prepareStatement(query1);
            pst.execute();
            
            JOptionPane.showMessageDialog(this,"Successfully Inserted","Success",JOptionPane.INFORMATION_MESSAGE);
            btnSave.setEnabled(false);

        } catch (HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // To delete a particular record regarding a doctor
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        try {
            int x = JOptionPane.showConfirmDialog(null," Are you sure want to delete ?","Confirm",JOptionPane.YES_NO_OPTION);
            if (x==0)
            {
                con=Connect.ConnectDB();
                
                // Query to delete details from patient_doc_assign table
                String query1= "DELETE FROM patient_doc_assign WHERE admit_id = '" + txtAdmitNo.getText() + "' "
                        + "AND doc_id='" + txtDocID.getText() +"'";
               
                pst=con.prepareStatement(query1);
                pst.execute();

                JOptionPane.showMessageDialog(this,"Successfully Deleted","Success",JOptionPane.INFORMATION_MESSAGE);
                this.clear();
            }
        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnGetDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDataActionPerformed
        this.hide();
        // Load DoctorAssignRecord form to select already inserted doctor-assign details
        DoctorAssignRecord frm = new DoctorAssignRecord(1);
        frm.setVisible(true);
    }//GEN-LAST:event_btnGetDataActionPerformed

    private void txtAdmitNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdmitNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdmitNoActionPerformed

    private void txtAdmitNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdmitNoKeyReleased
        this.search1();
    }//GEN-LAST:event_txtAdmitNoKeyReleased

    private void txtDocIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocIDKeyReleased
        this.search2();
    }//GEN-LAST:event_txtDocIDKeyReleased

    // Add data to the required fields from the jTable1
    private void btnGetPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetPatientActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable1.getSelectedRow();
            String table_click= jTable1.getModel().getValueAt(row, 0).toString();

            // Get data for particular admit_id
            String query= "SELECT a.admit_id,a.patient_id,p.patient_name "
                    + "FROM admission a,patient p WHERE a.admit_id= '" + table_click + "' "
                    + "AND a.patient_id=p.patient_id";
            pst=con.prepareStatement(query);
            rs=  pst.executeQuery();
            
            // Add data to the required fields
            if(rs.next()){
                String addNo=rs.getString("admit_id");
                this.txtAdmitNo.setText(addNo);
                
                String addPatientID=rs.getString("patient_id");
                this.lbPatientID.setText(addPatientID);
                
                String addPatientName=rs.getString("patient_name");
                this.lbPatientName.setText(addPatientName);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_btnGetPatientActionPerformed

    // Add data to the required fields from the jTable2
    private void getAssignedDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAssignedDocActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable2.getSelectedRow();
            String table_click= jTable2.getModel().getValueAt(row, 0).toString();

            // Get data for particular emp_id
            String query= "SELECT d.emp_id,e.emp_name,d.spec_name "
                    + "FROM doctor d,employee e WHERE d.emp_id= '" + table_click + "' "
                    + "AND e.emp_id=d.emp_id";
                    
            pst=con.prepareStatement(query);
            rs=  pst.executeQuery();
            
            // Add data to the required fields
            if(rs.next()){
                String addNo=rs.getString("emp_id");
                this.txtDocID.setText(addNo);
                
                String addDocName=rs.getString("emp_name");
                this.lbDocName.setText(addDocName);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_getAssignedDocActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.hide();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorAssign(null,null,null,null,0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetData;
    private javax.swing.JButton btnGetPatient;
    private javax.swing.JButton btnNew;
    public javax.swing.JButton btnSave;
    private javax.swing.JButton getAssignedDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    public javax.swing.JLabel lbDocName;
    public javax.swing.JLabel lbPatientID;
    public javax.swing.JLabel lbPatientName;
    public javax.swing.JTextField txtAdmitNo;
    public javax.swing.JTextField txtDocID;
    // End of variables declaration//GEN-END:variables

    // Get data for jTable1 when this form is loading
    private void getData1() {
        con=Connect.ConnectDB();
        try{
            String query="SELECT a.admit_id,p.patient_id,p.patient_name FROM patient p,admission a"
                    + " WHERE p.patient_id=a.patient_id";
            pst=con.prepareStatement(query);
            rs= pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3)});
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Get data for jTable2 when this form is loading
    private void getData2() {
        con=Connect.ConnectDB();
        try{
            String query="SELECT d.emp_id,e.emp_name,d.spec_name"
                    + " FROM employee e ,doctor d WHERE e.emp_id=d.emp_id";
            pst=con.prepareStatement(query);
            rs= pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable2.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3)});
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    // Reset all the fields
    private void clear() {
        lbPatientID.setText("Search here");
        lbPatientName.setText("");
        txtDocID.setText("Search here");
        lbDocName.setText("");
        txtAdmitNo.setText("Search here");
        
        btnSave.setEnabled(true);
        btnDelete.setEnabled(false);
        lbPatientID.requestDefaultFocus();
    }

    // Search patient and admission tables
    private void search1() {
        try{
            con=Connect.ConnectDB();
            String query="SELECT a.admit_id,p.patient_id,p.patient_name FROM patient p,admission a"
                    + " WHERE (a.admit_id LIKE '%"+txtAdmitNo.getText()+"%' OR p.patient_id LIKE '%"
                    +txtAdmitNo.getText()+"%' OR p.patient_name LIKE '%"
                    +txtAdmitNo.getText()+"%') AND p.patient_id=a.patient_id";
            
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }

    // Search doctor and employee tables
    private void search2() {
        try{
            con=Connect.ConnectDB();
            String query="SELECT d.emp_id,e.emp_name,d.spec_name FROM doctor d,employee e "
                    + "WHERE (d.emp_id LIKE '%"+txtDocID.getText()+"%' OR e.emp_name LIKE '%"
                    +txtDocID.getText()+"%' OR d.spec_name LIKE '%"+txtDocID.getText()
                    +"%') AND e.emp_id=d.emp_id";
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable2.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),
                    rs.getString(3)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }
}
