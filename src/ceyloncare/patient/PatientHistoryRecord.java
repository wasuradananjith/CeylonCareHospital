/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceyloncare.patient;

import ceyloncare.login.Connect;
import ceyloncare.payment.Payment;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wasura Dananjith
 */
public class PatientHistoryRecord extends javax.swing.JFrame {
    Connection con = null;
    ResultSet rs,rs1,rs2,rs3,rs4 = null;
    PreparedStatement pst = null;
    String type="";// To identify from which mode the control flow was passed 
    
    public PatientHistoryRecord() {
        initComponents();
        setLocationRelativeTo(null);
        
        // Get data for jTable1 when this form is loading 
        this.getData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Get Details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Admission Number", "Patient ID", "Name", "Admit Date", "Disease"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Search");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnAdd.setText("Add to Form");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 365, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        this.search();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try{
            con=Connect.ConnectDB();
            
            // Select the particular row
            int row= jTable1.getSelectedRow();
            String table_click= jTable1.getModel().getValueAt(row, 0).toString();
            
            // Selecting data for a particular admit_id
            String query1= "SELECT a.admit_id,p.patient_id,p.patient_name,a.admit_date,a.disease "
                    + "FROM admission a,patient p "
                    + "WHERE p.patient_id=a.patient_id AND a.admit_id='"+ table_click +"'";
            
            pst=con.prepareStatement(query1);
            rs1=  pst.executeQuery();
            
            this.hide();
            // Create a new object from Payment Form Class
            Payment frm = new Payment();
            frm.setVisible(true);
            
            // Add data to the required fields in the created Form Object
            if (rs1.next()){
                String addAdmitNo = rs1.getString("admit_id");
                frm.lbAdmitNo.setText(addAdmitNo);
                
                String addPatientNo = rs1.getString("patient_id");
                frm.lbPatientID.setText(addPatientNo);
                
                String addName = rs1.getString("patient_name");
                frm.lbName.setText(addName);
                
                String addAdmitDate = rs1.getString("admit_date");
                frm.lbDate.setText(addAdmitDate);
                
                String disease = rs1.getString("disease");
                frm.lbDisease.setText(disease);
            }        
            
            // Selecting data for a particular admit_id
            String query2="SELECT w.ward_no,w.spec_name,w.charge_per_bed FROM ward w,admission a "
                + "WHERE a.ward_no=w.ward_no AND a.admit_id='"+ rs1.getString("admit_id") +"'";
            
            pst=con.prepareStatement(query2);
            rs2=  pst.executeQuery();
            
            // Add data to the required fields in the created Form Object
            if (rs2.next()){
                String addWardNo = rs2.getString("ward_no");
                frm.lbWardNo.setText(addWardNo);
                
                String addWardType = rs2.getString("spec_name");
                frm.lbWardType.setText(addWardType);
                
                String addCharge = rs2.getString("charge_per_bed");
                frm.lbWardCharge.setText(addCharge);
            }
            
            // Selecting data for a particular admit_id
            String query3 = "SELECT s.doc_id,e.emp_name,d.doc_fee FROM patient_doc_assign s,doctor d,employee e "
                    + "WHERE s.admit_id='"+ rs1.getString("admit_id") +"' AND d.emp_id=s.doc_id AND e.emp_id=d.emp_id";
            
            pst =con.prepareStatement(query3);
            rs3 =pst.executeQuery();
            
            // Add data to the jTable2 in the created form object
            DefaultTableModel registrationModel = (DefaultTableModel)frm.jTable2.getModel();
            registrationModel.setRowCount(0);
            float totFee = 0;
            while(rs3.next())
            {
                registrationModel.addRow(new Object[]{rs3.getString(1),rs3.getString(2),rs3.getString(3)});
                totFee+=Float.parseFloat(rs3.getString(3));
            }
            frm.lbTotalFee.setText(Float.toString(totFee));
            
            // Selecting data for a particular admit_id
            String query4 = "SELECT t.test_id,t.test_name,t.test_fee FROM test t,test_result r "
                    + "WHERE r.test_id=t.test_id AND r.admit_id='"+ rs1.getString("admit_id") +"'";
            
            pst =con.prepareStatement(query4);
            rs4 =pst.executeQuery();
            
            // Add data to the jTable3 in the created form object
            DefaultTableModel registrationModel2 = (DefaultTableModel)frm.jTable3.getModel();
            registrationModel2.setRowCount(0);
            float totCharge = 0;
            while(rs4.next())
            {
                registrationModel2.addRow(new Object[]{rs4.getString(1),rs4.getString(2),rs4.getString(3)});
                totCharge+=Float.parseFloat(rs4.getString(3));
            }
            frm.lbTotalTest.setText(Float.toString(totCharge));
            
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this,"No row selected!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.hide();
        // Load Payment form because earlier control flow was passed from that form
        Payment frm = new Payment();
        frm.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientHistoryRecord().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    // Get data for jTable1 when this form is loading 
    private void getData() {
        con=Connect.ConnectDB();
        try{
            String query="SELECT a.admit_id,p.patient_id,p.patient_name,a.admit_date,a.disease "
                    + "FROM admission a,patient p "
                    + "WHERE p.patient_id=a.patient_id ORDER BY a.admit_id";
            pst=con.prepareStatement(query);
            rs= pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3),
                rs.getString(4),rs.getString(5)});
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Search admission and patient tables
    private void search() {
        try{
            con=Connect.ConnectDB();
            String query="SELECT a.admit_id,p.patient_id,p.patient_name,a.admit_date,a.disease "
                    + "FROM admission a,patient p "
                    + "WHERE (a.admit_id LIKE '%" + txtSearch.getText() + "%' "
                    + "OR p.patient_id LIKE '%" + txtSearch.getText() + "%' "
                    + "OR p.patient_name LIKE '%" + txtSearch.getText() + "%' "
                    + "OR a.admit_date LIKE '%" + txtSearch.getText() + "%' "
                    + "OR a.disease LIKE '%" + txtSearch.getText() + "%') "
                    + "AND (p.patient_id=a.patient_id) ORDER BY a.admit_id";
            
            pst=con.prepareStatement(query);
            rs=pst.executeQuery();
            DefaultTableModel registrationModel = (DefaultTableModel)jTable1.getModel();
            registrationModel.setRowCount(0);
            while(rs.next())
            {
                registrationModel.addRow(new Object[]{rs.getString(1),rs.getString(2),rs.getString(3),
                rs.getString(4),rs.getString(5)});
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
    }
}
